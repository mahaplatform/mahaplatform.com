'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var verify = exports.verify = function verify(token) {
  return {
    type: 'API_REQUEST',
    method: 'POST',
    endpoint: '/api/admin/activate/verify',
    body: { token: token },
    request: 'VERIFY_REQUEST',
    success: 'VERIFY_SUCCESS',
    failure: 'VERIFY_FAILURE'
  };
};

var security = exports.security = function security(token, security_question_id, security_question_answer) {
  return {
    type: 'API_REQUEST',
    method: 'POST',
    endpoint: '/api/admin/activate/security',
    body: { token: token, security_question_id: security_question_id, security_question_answer: security_question_answer },
    request: 'SECURITY_REQUEST',
    success: 'SECURITY_SUCCESS',
    failure: 'SECURITY_FAILURE'
  };
};

var password = exports.password = function password(token, _password, confirmation) {
  return {
    type: 'API_REQUEST',
    method: 'POST',
    endpoint: '/api/admin/activate/password',
    body: { token: token, password: _password, confirmation: confirmation },
    request: 'PASSWORD_REQUEST',
    success: 'PASSWORD_SUCCESS',
    failure: 'PASSWORD_FAILURE'
  };
};

var avatar = exports.avatar = function avatar(token, photo_id) {
  return {
    type: 'API_REQUEST',
    method: 'POST',
    endpoint: '/api/admin/activate/avatar',
    body: { token: token, photo_id: photo_id },
    request: 'AVATAR_REQUEST',
    success: 'AVATAR_SUCCESS',
    failure: 'AVATAR_FAILURE'
  };
};

var notifications = exports.notifications = function notifications(token, notification_method_id) {
  return {
    type: 'API_REQUEST',
    method: 'POST',
    endpoint: '/api/admin/activate/notifications',
    body: { token: token, notification_method_id: notification_method_id },
    request: 'NOTIFICATIONS_REQUEST',
    success: 'NOTIFICATIONS_SUCCESS',
    failure: 'NOTIFICATIONS_FAILURE'
  };
};

var changeMode = exports.changeMode = function changeMode(mode) {
  return {
    type: 'CHANGE_MODE',
    mode: mode
  };
};

var chooseQuestion = exports.chooseQuestion = function chooseQuestion(id) {
  return {
    type: 'CHOOSE_QUESTION',
    id: id
  };
};

var togglePassword = exports.togglePassword = function togglePassword() {
  return {
    type: 'TOGGLE_PASSWORD'
  };
};

var setPhotoId = exports.setPhotoId = function setPhotoId(id) {
  return {
    type: 'SET_PHOTO_ID',
    id: id
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsidmVyaWZ5IiwidG9rZW4iLCJ0eXBlIiwibWV0aG9kIiwiZW5kcG9pbnQiLCJib2R5IiwicmVxdWVzdCIsInN1Y2Nlc3MiLCJmYWlsdXJlIiwic2VjdXJpdHkiLCJzZWN1cml0eV9xdWVzdGlvbl9pZCIsInNlY3VyaXR5X3F1ZXN0aW9uX2Fuc3dlciIsInBhc3N3b3JkIiwiY29uZmlybWF0aW9uIiwiYXZhdGFyIiwicGhvdG9faWQiLCJub3RpZmljYXRpb25zIiwibm90aWZpY2F0aW9uX21ldGhvZF9pZCIsImNoYW5nZU1vZGUiLCJtb2RlIiwiY2hvb3NlUXVlc3Rpb24iLCJpZCIsInRvZ2dsZVBhc3N3b3JkIiwic2V0UGhvdG9JZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxJQUFNQSwwQkFBUyxTQUFUQSxNQUFTLENBQUNDLEtBQUQ7QUFBQSxTQUFZO0FBQ2hDQyxVQUFNLGFBRDBCO0FBRWhDQyxZQUFRLE1BRndCO0FBR2hDQyxjQUFVLDRCQUhzQjtBQUloQ0MsVUFBTSxFQUFFSixZQUFGLEVBSjBCO0FBS2hDSyxhQUFTLGdCQUx1QjtBQU1oQ0MsYUFBUyxnQkFOdUI7QUFPaENDLGFBQVM7QUFQdUIsR0FBWjtBQUFBLENBQWY7O0FBVUEsSUFBTUMsOEJBQVcsU0FBWEEsUUFBVyxDQUFDUixLQUFELEVBQVFTLG9CQUFSLEVBQThCQyx3QkFBOUI7QUFBQSxTQUE0RDtBQUNsRlQsVUFBTSxhQUQ0RTtBQUVsRkMsWUFBUSxNQUYwRTtBQUdsRkMsY0FBVSw4QkFId0U7QUFJbEZDLFVBQU0sRUFBRUosWUFBRixFQUFTUywwQ0FBVCxFQUErQkMsa0RBQS9CLEVBSjRFO0FBS2xGTCxhQUFTLGtCQUx5RTtBQU1sRkMsYUFBUyxrQkFOeUU7QUFPbEZDLGFBQVM7QUFQeUUsR0FBNUQ7QUFBQSxDQUFqQjs7QUFVQSxJQUFNSSw4QkFBVyxrQkFBQ1gsS0FBRCxFQUFRVyxTQUFSLEVBQWtCQyxZQUFsQjtBQUFBLFNBQW9DO0FBQzFEWCxVQUFNLGFBRG9EO0FBRTFEQyxZQUFRLE1BRmtEO0FBRzFEQyxjQUFVLDhCQUhnRDtBQUkxREMsVUFBTSxFQUFFSixZQUFGLEVBQVNXLG1CQUFULEVBQW1CQywwQkFBbkIsRUFKb0Q7QUFLMURQLGFBQVMsa0JBTGlEO0FBTTFEQyxhQUFTLGtCQU5pRDtBQU8xREMsYUFBUztBQVBpRCxHQUFwQztBQUFBLENBQWpCOztBQVVBLElBQU1NLDBCQUFTLFNBQVRBLE1BQVMsQ0FBQ2IsS0FBRCxFQUFRYyxRQUFSO0FBQUEsU0FBc0I7QUFDMUNiLFVBQU0sYUFEb0M7QUFFMUNDLFlBQVEsTUFGa0M7QUFHMUNDLGNBQVUsNEJBSGdDO0FBSTFDQyxVQUFNLEVBQUVKLFlBQUYsRUFBU2Msa0JBQVQsRUFKb0M7QUFLMUNULGFBQVMsZ0JBTGlDO0FBTTFDQyxhQUFTLGdCQU5pQztBQU8xQ0MsYUFBUztBQVBpQyxHQUF0QjtBQUFBLENBQWY7O0FBVUEsSUFBTVEsd0NBQWdCLFNBQWhCQSxhQUFnQixDQUFDZixLQUFELEVBQVFnQixzQkFBUjtBQUFBLFNBQW9DO0FBQy9EZixVQUFNLGFBRHlEO0FBRS9EQyxZQUFRLE1BRnVEO0FBRy9EQyxjQUFVLG1DQUhxRDtBQUkvREMsVUFBTSxFQUFFSixZQUFGLEVBQVNnQiw4Q0FBVCxFQUp5RDtBQUsvRFgsYUFBUyx1QkFMc0Q7QUFNL0RDLGFBQVMsdUJBTnNEO0FBTy9EQyxhQUFTO0FBUHNELEdBQXBDO0FBQUEsQ0FBdEI7O0FBVUEsSUFBTVUsa0NBQWEsU0FBYkEsVUFBYSxDQUFDQyxJQUFEO0FBQUEsU0FBVztBQUNuQ2pCLFVBQU0sYUFENkI7QUFFbkNpQjtBQUZtQyxHQUFYO0FBQUEsQ0FBbkI7O0FBS0EsSUFBTUMsMENBQWlCLFNBQWpCQSxjQUFpQixDQUFDQyxFQUFEO0FBQUEsU0FBUztBQUNyQ25CLFVBQU0saUJBRCtCO0FBRXJDbUI7QUFGcUMsR0FBVDtBQUFBLENBQXZCOztBQUtBLElBQU1DLDBDQUFpQixTQUFqQkEsY0FBaUI7QUFBQSxTQUFPO0FBQ25DcEIsVUFBTTtBQUQ2QixHQUFQO0FBQUEsQ0FBdkI7O0FBSUEsSUFBTXFCLGtDQUFhLFNBQWJBLFVBQWEsQ0FBQ0YsRUFBRDtBQUFBLFNBQVM7QUFDakNuQixVQUFNLGNBRDJCO0FBRWpDbUI7QUFGaUMsR0FBVDtBQUFBLENBQW5CIiwiZmlsZSI6InVua25vd24iLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyaWZ5ID0gKHRva2VuKSA9PiAoe1xuICB0eXBlOiAnQVBJX1JFUVVFU1QnLFxuICBtZXRob2Q6ICdQT1NUJyxcbiAgZW5kcG9pbnQ6ICcvYXBpL2FkbWluL2FjdGl2YXRlL3ZlcmlmeScsXG4gIGJvZHk6IHsgdG9rZW4gfSxcbiAgcmVxdWVzdDogJ1ZFUklGWV9SRVFVRVNUJyxcbiAgc3VjY2VzczogJ1ZFUklGWV9TVUNDRVNTJyxcbiAgZmFpbHVyZTogJ1ZFUklGWV9GQUlMVVJFJ1xufSlcblxuZXhwb3J0IGNvbnN0IHNlY3VyaXR5ID0gKHRva2VuLCBzZWN1cml0eV9xdWVzdGlvbl9pZCwgc2VjdXJpdHlfcXVlc3Rpb25fYW5zd2VyKSA9PiAoe1xuICB0eXBlOiAnQVBJX1JFUVVFU1QnLFxuICBtZXRob2Q6ICdQT1NUJyxcbiAgZW5kcG9pbnQ6ICcvYXBpL2FkbWluL2FjdGl2YXRlL3NlY3VyaXR5JyxcbiAgYm9keTogeyB0b2tlbiwgc2VjdXJpdHlfcXVlc3Rpb25faWQsIHNlY3VyaXR5X3F1ZXN0aW9uX2Fuc3dlciB9LFxuICByZXF1ZXN0OiAnU0VDVVJJVFlfUkVRVUVTVCcsXG4gIHN1Y2Nlc3M6ICdTRUNVUklUWV9TVUNDRVNTJyxcbiAgZmFpbHVyZTogJ1NFQ1VSSVRZX0ZBSUxVUkUnXG59KVxuXG5leHBvcnQgY29uc3QgcGFzc3dvcmQgPSAodG9rZW4sIHBhc3N3b3JkLCBjb25maXJtYXRpb24pID0+ICh7XG4gIHR5cGU6ICdBUElfUkVRVUVTVCcsXG4gIG1ldGhvZDogJ1BPU1QnLFxuICBlbmRwb2ludDogJy9hcGkvYWRtaW4vYWN0aXZhdGUvcGFzc3dvcmQnLFxuICBib2R5OiB7IHRva2VuLCBwYXNzd29yZCwgY29uZmlybWF0aW9uIH0sXG4gIHJlcXVlc3Q6ICdQQVNTV09SRF9SRVFVRVNUJyxcbiAgc3VjY2VzczogJ1BBU1NXT1JEX1NVQ0NFU1MnLFxuICBmYWlsdXJlOiAnUEFTU1dPUkRfRkFJTFVSRSdcbn0pXG5cbmV4cG9ydCBjb25zdCBhdmF0YXIgPSAodG9rZW4sIHBob3RvX2lkKSA9PiAoe1xuICB0eXBlOiAnQVBJX1JFUVVFU1QnLFxuICBtZXRob2Q6ICdQT1NUJyxcbiAgZW5kcG9pbnQ6ICcvYXBpL2FkbWluL2FjdGl2YXRlL2F2YXRhcicsXG4gIGJvZHk6IHsgdG9rZW4sIHBob3RvX2lkIH0sXG4gIHJlcXVlc3Q6ICdBVkFUQVJfUkVRVUVTVCcsXG4gIHN1Y2Nlc3M6ICdBVkFUQVJfU1VDQ0VTUycsXG4gIGZhaWx1cmU6ICdBVkFUQVJfRkFJTFVSRSdcbn0pXG5cbmV4cG9ydCBjb25zdCBub3RpZmljYXRpb25zID0gKHRva2VuLCBub3RpZmljYXRpb25fbWV0aG9kX2lkKSA9PiAoe1xuICB0eXBlOiAnQVBJX1JFUVVFU1QnLFxuICBtZXRob2Q6ICdQT1NUJyxcbiAgZW5kcG9pbnQ6ICcvYXBpL2FkbWluL2FjdGl2YXRlL25vdGlmaWNhdGlvbnMnLFxuICBib2R5OiB7IHRva2VuLCBub3RpZmljYXRpb25fbWV0aG9kX2lkIH0sXG4gIHJlcXVlc3Q6ICdOT1RJRklDQVRJT05TX1JFUVVFU1QnLFxuICBzdWNjZXNzOiAnTk9USUZJQ0FUSU9OU19TVUNDRVNTJyxcbiAgZmFpbHVyZTogJ05PVElGSUNBVElPTlNfRkFJTFVSRSdcbn0pXG5cbmV4cG9ydCBjb25zdCBjaGFuZ2VNb2RlID0gKG1vZGUpID0+ICh7XG4gIHR5cGU6ICdDSEFOR0VfTU9ERScsXG4gIG1vZGVcbn0pXG5cbmV4cG9ydCBjb25zdCBjaG9vc2VRdWVzdGlvbiA9IChpZCkgPT4gKHtcbiAgdHlwZTogJ0NIT09TRV9RVUVTVElPTicsXG4gIGlkXG59KVxuXG5leHBvcnQgY29uc3QgdG9nZ2xlUGFzc3dvcmQgPSAoKSA9PiAoe1xuICB0eXBlOiAnVE9HR0xFX1BBU1NXT1JEJ1xufSlcblxuZXhwb3J0IGNvbnN0IHNldFBob3RvSWQgPSAoaWQpID0+ICh7XG4gIHR5cGU6ICdTRVRfUEhPVE9fSUQnLFxuICBpZFxufSlcbiJdfQ==